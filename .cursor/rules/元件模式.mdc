---
globs: "app/components/**/*.tsx"
---
# React 元件模式

## 元件組織
元件按功能組織在 [app/components/](mdc:app/components/) 中：
- `admin/` - 管理員專用元件 (表格、模態框、設定)
- `auth/` - 驗證元件 (登入、驗證提供者)
- `layout/` - 版面配置元件 (頁首、導覽)
- `project/` - 專案相關元件 (卡片、篩選器)
- `ui/` - 可重複使用的 UI 元件 (按鈕、工具提示、載入圖示)

## 客戶端 vs 伺服器元件
- **預設使用伺服器元件**進行資料擷取
- **僅在需要時**使用 `'use client'` 指令：
  - 互動式狀態 (useState, useReducer)
  - 事件處理器 (onClick, onChange)
  - 瀏覽器 API (localStorage, window)
  - React hooks (useEffect, useContext)

## 元件結構模式
為保持一致性，請遵循此結構：
```typescript
'use client'; // 僅在需要時使用

import { useState } from 'react';
import { SomeIcon } from '@heroicons/react/24/outline';
import { Project } from '@/types';

interface ComponentProps {
  // Props 定義
}

export function ComponentName({ prop1, prop2 }: ComponentProps) {
  // 1. Hooks (useState, useEffect, etc.)
  const [state, setState] = useState(initialValue);
  
  // 2. 事件處理器
  const handleClick = () => {
    // ...
  };
  
  // 3. 工具函數
  const formatData = (data: any) => {
    // ...
  };
  
  // 4. JSX 回傳
  return (
    <div className="...">
      {/* 元件內容 */}
    </div>
  );
}
```

## 狀態管理
- 使用本地狀態 (useState) 管理元件特定狀態
- 當多個元件需要時，將狀態提升
- Context 用於主題和驗證 (參見 [AuthProvider.tsx](mdc:app/components/auth/AuthProvider.tsx))
- 將關鍵狀態與 API/Vercel Blob 同步

## 管理員 vs 訪客邏輯
許多元件同時處理管理員和訪客模式：
- 當相關時，總是接受 `isAdmin: boolean` prop
- 根據 `isAdmin` 顯示/隱藏功能
- 對於專案，尊重訪客的 `visibility` 設定
- 管理員總是能看到所有欄位 (若對訪客隱藏則會變暗)

來自 [ProjectCard.tsx](mdc:app/components/project/ProjectCard.tsx) 的範例模式：
```typescript
{(isAdmin || project.visibility.fieldName) && (
  <div className={!project.visibility.fieldName && isAdmin ? 'opacity-40 line-through' : ''}>
    {/* 欄位內容 */}
  </div>
)}
```

## 事件處理器
- 非同步操作應優雅地處理錯誤
- 在非同步操作期間顯示載入狀態
- 採用樂觀更新並在錯誤時回滾
- 對 API 呼叫使用 try-catch

## 圖示
- 使用 `@heroicons/react/24/outline` 或 `/24/solid` 的 Heroicons
- 保持圖示尺寸一致 (小 h-4 w-4，中 h-5 w-5，大 h-6 w-6)
- 自訂圖示 (GitHub, Vercel) 在元件內聯定義

## 無障礙性
- 使用語意化 HTML
- 在需要時添加 ARIA 標籤
- 確保鍵盤導覽功能正常
- 維持適當的對比度