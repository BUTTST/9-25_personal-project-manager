---
globs: "app/lib/**/*.ts,app/api/**/*.ts"
---
# 資料管理指南

## 儲存架構
所有持久性資料都以單一 JSON 檔案的形式儲存在 Vercel Blob 中，並由 [blob-storage.ts](mdc:app/lib/blob-storage.ts) 管理。

## 資料結構
完整的資料結構在 [types/index.ts](mdc:app/types/index.ts) 中定義為 `ProjectData`：
```typescript
{
  projects: Project[],
  passwords: PasswordEntry[],
  settings: AppSettings,
  metadata: {
    lastUpdated: number,
    version: string,
    totalProjects: number,
    publicProjects: number,
    writeTimestamp?: number,
    safetyCheck?: 'VERIFIED' | 'FORCED',
    backupTimestamp?: number,
    backupReason?: string
  }
}
```

## 讀取資料
使用 [blob-storage.ts](mdc:app/lib/blob-storage.ts) 中的 `readProjectData()`：
```typescript
import { readProjectData } from '@/lib/blob-storage';

const data = await readProjectData();
// 如果 blob 不存在，則回傳預設資料
```

特色：
- 自動回退到預設資料
- 回傳前進行資料驗證
- 用於偵錯的主控台記錄
- 具備優雅降級的錯誤處理

## 寫入資料
使用內建安全檢查的 `writeProjectData(data, forceWrite?)`：
```typescript
import { writeProjectData } from '@/lib/blob-storage';

// 正常寫入 (含安全檢查)
await writeProjectData(updatedData);

// 強制寫入 (繞過安全檢查 - 請謹慎使用)
await writeProjectData(updatedData, true);
```

安全功能：
1. **資料完整性驗證**，透過 [data-safety.ts](mdc:app/lib/data-safety.ts)
2. **空資料保護** - 防止意外的資料清除
3. **備份元資料** - 追蹤寫入操作
4. **強制寫入選項** - 用於有意的覆寫

## 資料安全
[data-safety.ts](mdc:app/lib/data-safety.ts) 模組提供：

### 驗證函數
- `validateDataIntegrity(data)` - 全面的資料驗證
- `isEmptyData(data)` - 檢查資料是否實質上為空
- `createBackupData(data, reason)` - 建立含元資料的備份

### 驗證規則
- `projects` 陣列必須存在且有效
- `settings` 必須包含所有必要欄位
- 每個專案必須有必要欄位 (id, dateAndFileName, category 等)
- 可見性設定必須完整
- 元資料必須包含版本和時間戳記

## 資料變動模式

### 新增項目
```typescript
const data = await readProjectData();
const newProject = {
  id: generateId(),
  ...projectData,
  createdAt: Date.now(),
  updatedAt: Date.now(),
  sortOrder: data.projects.length
};

const updatedData = {
  ...data,
  projects: [...data.projects, newProject],
  metadata: {
    ...data.metadata,
    lastUpdated: Date.now(),
    totalProjects: data.projects.length + 1
  }
};

await writeProjectData(updatedData);
```

### 更新項目
```typescript
const data = await readProjectData();
const updatedProjects = data.projects.map(p =>
  p.id === projectId ? { ...p, ...updates, updatedAt: Date.now() } : p
);

const updatedData = {
  ...data,
  projects: updatedProjects,
  metadata: {
    ...data.metadata,
    lastUpdated: Date.now()
  }
};

await writeProjectData(updatedData);
```

### 刪除項目
```typescript
const data = await readProjectData();
const filteredProjects = data.projects.filter(p => p.id !== projectId);

const updatedData = {
  ...data,
  projects: filteredProjects,
  metadata: {
    ...data.metadata,
    lastUpdated: Date.now(),
    totalProjects: filteredProjects.length
  }
};

await writeProjectData(updatedData);
```

## 篩選資料

### 公開專案
使用 `getPublicProjects()` 篩選訪客視圖：
```typescript
import { getPublicProjects } from '@/lib/blob-storage';

const publicProjects = getPublicProjects(allProjects);
// 回傳的專案具備：
// - visibility.description === true
// - category !== 'abandoned'
// - developerNote 已移除
```

### 自訂篩選
為訪客篩選時，務必尊重可見性設定：
```typescript
const visibleProjects = projects.filter(project => {
  if (!isAdmin) {
    // 訪客僅能看到 description 可見的專案
    if (!project.visibility.description) return false;
    // 訪客看不到已捨棄的專案
    if (project.category === 'abandoned') return false;
  }
  return true;
});
```

## 統計計算
參閱 [statistics.ts](mdc:app/lib/statistics.ts) 計算專案統計資料：
- 總專案數
- 公開專案數
- 分類計數
- 基於狀態的計數
- 自訂指標

## UI 設定管理
UI 自訂 (篩選器、統計) 儲存在 `settings.uiDisplay` 中：
```typescript
interface UIDisplaySettings {
  filters: FilterConfig[];      // 啟用/停用的篩選器及其順序
  statistics: StatisticConfig[]; // 啟用/停用的統計資料及其順序
}
```

透過 `/api/settings/ui-display` 端點更新。

## 錯誤恢復
若資料損毀：
1. 使用 `/api/admin/diagnose` 檢查資料狀態
2. 使用 `/api/admin/force-init` 重設為預設值
3. 使用 `/api/admin/init-data` 載入範例資料
4. 透過 Vercel 儀表板 > Blob Storage 手動恢復

## 最佳實踐
1. 寫入時務必更新 `metadata.lastUpdated`
2. 更新相關的元資料計數 (`totalProjects`, `publicProjects`)
3. 寫入前驗證資料
4. 優雅地處理讀寫錯誤
5. 僅在有意圖時使用強制寫入
6. 部署前在開發環境中測試資料操作
7. 在所有操作中保持一致的資料結構
8. 為偵錯記錄重要的資料操作